window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "qstrader", "modulename": "qstrader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model", "modulename": "qstrader.alpha_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.alpha_model", "modulename": "qstrader.alpha_model.alpha_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.alpha_model.AlphaModel", "modulename": "qstrader.alpha_model.alpha_model", "qualname": "AlphaModel", "kind": "class", "doc": "<p>Abstract interface for an AlphaModel callable.</p>\n\n<p>A derived-class instance of AlphaModel takes in an Asset\nUniverse and an optional DataHandler instance in order\nto generate forecast signals on Assets.</p>\n\n<p>These signals are used by the PortfolioConstructionModel\nto generate target weights for the portfolio.</p>\n\n<p>Implementing __call__ produces a dictionary keyed by\nAsset and with a scalar value as the signal.</p>\n"}, {"fullname": "qstrader.alpha_model.fixed_signals", "modulename": "qstrader.alpha_model.fixed_signals", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.fixed_signals.FixedSignalsAlphaModel", "modulename": "qstrader.alpha_model.fixed_signals", "qualname": "FixedSignalsAlphaModel", "kind": "class", "doc": "<p>A simple AlphaModel that provides a single scalar forecast\nvalue for each Asset in the Universe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>signal_weights : <code>dict{str: float}</code>\n    The signal weights per asset symbol.\nuniverse : <code>Universe</code>, optional\n    The Assets to make signal forecasts for.\ndata_handler : <code>DataHandler</code>, optional\n    An optional DataHandler used to preserve interface across AlphaModels.</p>\n", "bases": "qstrader.alpha_model.alpha_model.AlphaModel"}, {"fullname": "qstrader.alpha_model.fixed_signals.FixedSignalsAlphaModel.__init__", "modulename": "qstrader.alpha_model.fixed_signals", "qualname": "FixedSignalsAlphaModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">signal_weights</span>, </span><span class=\"param\"><span class=\"n\">universe</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.alpha_model.fixed_signals.FixedSignalsAlphaModel.signal_weights", "modulename": "qstrader.alpha_model.fixed_signals", "qualname": "FixedSignalsAlphaModel.signal_weights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.fixed_signals.FixedSignalsAlphaModel.universe", "modulename": "qstrader.alpha_model.fixed_signals", "qualname": "FixedSignalsAlphaModel.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.fixed_signals.FixedSignalsAlphaModel.data_handler", "modulename": "qstrader.alpha_model.fixed_signals", "qualname": "FixedSignalsAlphaModel.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.single_signal", "modulename": "qstrader.alpha_model.single_signal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.single_signal.SingleSignalAlphaModel", "modulename": "qstrader.alpha_model.single_signal", "qualname": "SingleSignalAlphaModel", "kind": "class", "doc": "<p>A simple AlphaModel that provides a single scalar forecast\nvalue for each Asset in the Universe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>universe : <code>Universe</code>\n    The Assets to make signal forecasts for.\nsignal : <code>float</code>, optional\n    The single fixed floating point scalar value for the signals.\ndata_handler : <code>DataHandler</code>, optional\n    An optional DataHandler used to preserve interface across AlphaModels.</p>\n", "bases": "qstrader.alpha_model.alpha_model.AlphaModel"}, {"fullname": "qstrader.alpha_model.single_signal.SingleSignalAlphaModel.__init__", "modulename": "qstrader.alpha_model.single_signal", "qualname": "SingleSignalAlphaModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.alpha_model.single_signal.SingleSignalAlphaModel.universe", "modulename": "qstrader.alpha_model.single_signal", "qualname": "SingleSignalAlphaModel.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.single_signal.SingleSignalAlphaModel.signal", "modulename": "qstrader.alpha_model.single_signal", "qualname": "SingleSignalAlphaModel.signal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.alpha_model.single_signal.SingleSignalAlphaModel.data_handler", "modulename": "qstrader.alpha_model.single_signal", "qualname": "SingleSignalAlphaModel.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset", "modulename": "qstrader.asset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.asset", "modulename": "qstrader.asset.asset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.asset.Asset", "modulename": "qstrader.asset.asset", "qualname": "Asset", "kind": "class", "doc": "<p>Generic asset class that stores meta data about a trading asset.</p>\n"}, {"fullname": "qstrader.asset.cash", "modulename": "qstrader.asset.cash", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.cash.Cash", "modulename": "qstrader.asset.cash", "qualname": "Cash", "kind": "class", "doc": "<p>Stores meta data about a cash asset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>currency : str, optional\n    The currency of the Cash Asset. Defaults to USD.</p>\n", "bases": "qstrader.asset.asset.Asset"}, {"fullname": "qstrader.asset.cash.Cash.__init__", "modulename": "qstrader.asset.cash", "qualname": "Cash.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s1\">&#39;USD&#39;</span></span>)</span>"}, {"fullname": "qstrader.asset.cash.Cash.cash_like", "modulename": "qstrader.asset.cash", "qualname": "Cash.cash_like", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.cash.Cash.currency", "modulename": "qstrader.asset.cash", "qualname": "Cash.currency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.equity", "modulename": "qstrader.asset.equity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.equity.Equity", "modulename": "qstrader.asset.equity", "qualname": "Equity", "kind": "class", "doc": "<p>Stores meta data about an equity common stock or ETF.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : <code>str</code>\n    The asset's name (e.g. the company name and/or\n    share class).\nsymbol : <code>str</code>\n    The asset's original ticker symbol.\n    TODO: This will require modification to handle proper\n    ticker mapping.\ntax_exempt: <code>boolean</code>, optional\n    Is the share exempt from government taxation?\n    Necessary for taxation on share transactions, such\n    as UK stamp duty.</p>\n", "bases": "qstrader.asset.asset.Asset"}, {"fullname": "qstrader.asset.equity.Equity.__init__", "modulename": "qstrader.asset.equity", "qualname": "Equity.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">symbol</span>, </span><span class=\"param\"><span class=\"n\">tax_exempt</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "qstrader.asset.equity.Equity.cash_like", "modulename": "qstrader.asset.equity", "qualname": "Equity.cash_like", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.equity.Equity.name", "modulename": "qstrader.asset.equity", "qualname": "Equity.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.equity.Equity.symbol", "modulename": "qstrader.asset.equity", "qualname": "Equity.symbol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.equity.Equity.tax_exempt", "modulename": "qstrader.asset.equity", "qualname": "Equity.tax_exempt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe", "modulename": "qstrader.asset.universe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.dynamic", "modulename": "qstrader.asset.universe.dynamic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.dynamic.DynamicUniverse", "modulename": "qstrader.asset.universe.dynamic", "qualname": "DynamicUniverse", "kind": "class", "doc": "<p>An Asset Universe that allows additions of assets\nbeyond a certain datetime.</p>\n\n<p>TODO: This does not currently support removal of assets\nor sequences of additions/removals.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset_dates : <code>dict{str: pd.Timestamp}</code>\n    Map of assets and their entry date.</p>\n", "bases": "qstrader.asset.universe.universe.Universe"}, {"fullname": "qstrader.asset.universe.dynamic.DynamicUniverse.__init__", "modulename": "qstrader.asset.universe.dynamic", "qualname": "DynamicUniverse.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">asset_dates</span></span>)</span>"}, {"fullname": "qstrader.asset.universe.dynamic.DynamicUniverse.asset_dates", "modulename": "qstrader.asset.universe.dynamic", "qualname": "DynamicUniverse.asset_dates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.dynamic.DynamicUniverse.get_assets", "modulename": "qstrader.asset.universe.dynamic", "qualname": "DynamicUniverse.get_assets", "kind": "function", "doc": "<p>Obtain the list of assets in the Universe at a particular\npoint in time. This will always return a static list\nindependent of the timestamp provided.</p>\n\n<p>If no date is provided do not include the asset. Only\nreturn those assets where the current datetime exceeds the\nprovided datetime.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The timestamp at which to retrieve the Asset list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>list[str]</code>\n    The list of Asset symbols in the static Universe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.asset.universe.static", "modulename": "qstrader.asset.universe.static", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.static.StaticUniverse", "modulename": "qstrader.asset.universe.static", "qualname": "StaticUniverse", "kind": "class", "doc": "<p>An Asset Universe that does not change its composition\nthrough time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset_list : <code>list[str]</code>\n    The list of Asset symbols that form the StaticUniverse.</p>\n", "bases": "qstrader.asset.universe.universe.Universe"}, {"fullname": "qstrader.asset.universe.static.StaticUniverse.__init__", "modulename": "qstrader.asset.universe.static", "qualname": "StaticUniverse.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">asset_list</span></span>)</span>"}, {"fullname": "qstrader.asset.universe.static.StaticUniverse.asset_list", "modulename": "qstrader.asset.universe.static", "qualname": "StaticUniverse.asset_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.static.StaticUniverse.get_assets", "modulename": "qstrader.asset.universe.static", "qualname": "StaticUniverse.get_assets", "kind": "function", "doc": "<p>Obtain the list of assets in the Universe at a particular\npoint in time. This will always return a static list\nindependent of the timestamp provided.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The timestamp at which to retrieve the Asset list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>list[str]</code>\n    The list of Asset symbols in the static Universe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.asset.universe.universe", "modulename": "qstrader.asset.universe.universe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.asset.universe.universe.Universe", "modulename": "qstrader.asset.universe.universe", "qualname": "Universe", "kind": "class", "doc": "<p>Interface specification for an Asset Universe.</p>\n"}, {"fullname": "qstrader.asset.universe.universe.Universe.get_assets", "modulename": "qstrader.asset.universe.universe", "qualname": "Universe.get_assets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker", "modulename": "qstrader.broker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.broker", "modulename": "qstrader.broker.broker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.broker.Broker", "modulename": "qstrader.broker.broker", "qualname": "Broker", "kind": "class", "doc": "<p>This abstract class provides an interface to a\ngeneric broker entity. Both simulated and live brokers\nwill be derived from this ABC. This ensures that trading\nalgorithm specific logic is completely identical for both\nsimulated and live environments.</p>\n\n<p>The Broker has an associated master denominated currency\nthrough which all subscriptions and withdrawals will occur.</p>\n\n<p>The Broker entity can support multiple sub-portfolios, each\nwith their own separate handling of PnL. The individual PnLs\nfrom each sub-portfolio can be aggregated to generate an\naccount-wide PnL.</p>\n\n<p>The Broker can execute orders. It contains a queue of\nopen orders, needed for handling closed market situations.</p>\n\n<p>The Broker also supports individual history events for each\nsub-portfolio, which can be aggregated, along with the\naccount history, to produce a full trading history for the\naccount.</p>\n"}, {"fullname": "qstrader.broker.broker.Broker.subscribe_funds_to_account", "modulename": "qstrader.broker.broker", "qualname": "Broker.subscribe_funds_to_account", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.withdraw_funds_from_account", "modulename": "qstrader.broker.broker", "qualname": "Broker.withdraw_funds_from_account", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_account_cash_balance", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_account_cash_balance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_account_total_non_cash_equity", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_account_total_non_cash_equity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_account_total_equity", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_account_total_equity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.create_portfolio", "modulename": "qstrader.broker.broker", "qualname": "Broker.create_portfolio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.list_all_portfolios", "modulename": "qstrader.broker.broker", "qualname": "Broker.list_all_portfolios", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.subscribe_funds_to_portfolio", "modulename": "qstrader.broker.broker", "qualname": "Broker.subscribe_funds_to_portfolio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.withdraw_funds_from_portfolio", "modulename": "qstrader.broker.broker", "qualname": "Broker.withdraw_funds_from_portfolio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_portfolio_cash_balance", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_portfolio_cash_balance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_portfolio_total_non_cash_equity", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_portfolio_total_non_cash_equity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_portfolio_total_equity", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_portfolio_total_equity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.get_portfolio_as_dict", "modulename": "qstrader.broker.broker", "qualname": "Broker.get_portfolio_as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.broker.Broker.submit_order", "modulename": "qstrader.broker.broker", "qualname": "Broker.submit_order", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">order</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.fee_model", "modulename": "qstrader.broker.fee_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.fee_model", "modulename": "qstrader.broker.fee_model.fee_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.fee_model.FeeModel", "modulename": "qstrader.broker.fee_model.fee_model", "qualname": "FeeModel", "kind": "class", "doc": "<p>Abstract class to handle the calculation of brokerage\ncommission, fees and taxes.</p>\n"}, {"fullname": "qstrader.broker.fee_model.fee_model.FeeModel.calc_total_cost", "modulename": "qstrader.broker.fee_model.fee_model", "qualname": "FeeModel.calc_total_cost", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">quantity</span>, </span><span class=\"param\"><span class=\"n\">consideration</span>, </span><span class=\"param\"><span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model", "modulename": "qstrader.broker.fee_model.percent_fee_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model.PercentFeeModel", "modulename": "qstrader.broker.fee_model.percent_fee_model", "qualname": "PercentFeeModel", "kind": "class", "doc": "<p>A FeeModel subclass that produces a percentage cost\nfor tax and commission.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>commission_pct : <code>float</code>, optional\n    The percentage commission applied to the consideration.\n    0-100% is in the range [0.0, 1.0]. Hence, e.g. 0.1% is 0.001\ntax_pct : <code>float</code>, optional\n    The percentage tax applied to the consideration.\n    0-100% is in the range [0.0, 1.0]. Hence, e.g. 0.1% is 0.001</p>\n", "bases": "qstrader.broker.fee_model.fee_model.FeeModel"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model.PercentFeeModel.__init__", "modulename": "qstrader.broker.fee_model.percent_fee_model", "qualname": "PercentFeeModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">commission_pct</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">tax_pct</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model.PercentFeeModel.commission_pct", "modulename": "qstrader.broker.fee_model.percent_fee_model", "qualname": "PercentFeeModel.commission_pct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model.PercentFeeModel.tax_pct", "modulename": "qstrader.broker.fee_model.percent_fee_model", "qualname": "PercentFeeModel.tax_pct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.percent_fee_model.PercentFeeModel.calc_total_cost", "modulename": "qstrader.broker.fee_model.percent_fee_model", "qualname": "PercentFeeModel.calc_total_cost", "kind": "function", "doc": "<p>Calculate the total of any commission and/or tax\nfor the trade of size 'consideration'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol string.\nquantity : <code>int</code>\n    The quantity of assets (needed for InteractiveBrokers\n    style calculations).\nconsideration : <code>float</code>\n    Price times quantity of the order.\nbroker : <code>Broker</code>, optional\n    An optional Broker reference.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total commission and tax.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">quantity</span>, </span><span class=\"param\"><span class=\"n\">consideration</span>, </span><span class=\"param\"><span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.fee_model.zero_fee_model", "modulename": "qstrader.broker.fee_model.zero_fee_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.fee_model.zero_fee_model.ZeroFeeModel", "modulename": "qstrader.broker.fee_model.zero_fee_model", "qualname": "ZeroFeeModel", "kind": "class", "doc": "<p>A FeeModel subclass that produces no commission, fees\nor taxes. This is the default fee model for simulated\nbrokerages within QSTrader.</p>\n", "bases": "qstrader.broker.fee_model.fee_model.FeeModel"}, {"fullname": "qstrader.broker.fee_model.zero_fee_model.ZeroFeeModel.calc_total_cost", "modulename": "qstrader.broker.fee_model.zero_fee_model", "qualname": "ZeroFeeModel.calc_total_cost", "kind": "function", "doc": "<p>Calculate the total of any commission and/or tax\nfor the trade of size 'consideration'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol string.\nquantity : <code>int</code>\n    The quantity of assets (needed for InteractiveBrokers\n    style calculations).\nconsideration : <code>float</code>\n    Price times quantity of the order.\nbroker : <code>Broker</code>, optional\n    An optional Broker reference.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The zero-cost total commission and tax.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">quantity</span>, </span><span class=\"param\"><span class=\"n\">consideration</span>, </span><span class=\"param\"><span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio", "modulename": "qstrader.broker.portfolio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio", "modulename": "qstrader.broker.portfolio.portfolio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio", "kind": "class", "doc": "<p>Represents a portfolio of assets. It contains a cash\naccount with the ability to subscribe and withdraw funds.\nIt also contains a list of positions in assets, encapsulated\nby a PositionHandler instance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : datetime\n    Portfolio creation datetime.\nstarting_cash : float, optional\n    Starting cash of the portfolio. Defaults to 100,000 USD.\ncurrency: str, optional\n    The portfolio denomination currency.\nportfolio_id: str, optional\n    An identifier for the portfolio.\nname: str, optional\n    The human-readable name of the portfolio.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.__init__", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.__init__", "kind": "function", "doc": "<p>Initialise the Portfolio object with a PositionHandler,\nan event history, along with cash balance. Make sure\nthe portfolio denomination currency is also set.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_dt</span>,</span><span class=\"param\">\t<span class=\"n\">starting_cash</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s1\">&#39;USD&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">portfolio_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.start_dt", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.current_dt", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.current_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.starting_cash", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.starting_cash", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.currency", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.currency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.portfolio_id", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.name", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.pos_handler", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.pos_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.history", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.history", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.logger", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.total_market_value", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.total_market_value", "kind": "variable", "doc": "<p>Obtain the total market value of the portfolio excluding cash.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.total_equity", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.total_equity", "kind": "variable", "doc": "<p>Obtain the total market value of the portfolio including cash.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.total_unrealised_pnl", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.total_unrealised_pnl", "kind": "variable", "doc": "<p>Calculate the sum of all the positions' unrealised P&amp;Ls.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.total_realised_pnl", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.total_realised_pnl", "kind": "variable", "doc": "<p>Calculate the sum of all the positions' realised P&amp;Ls.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.total_pnl", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.total_pnl", "kind": "variable", "doc": "<p>Calculate the sum of all the positions' total P&amp;Ls.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.subscribe_funds", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.subscribe_funds", "kind": "function", "doc": "<p>Credit funds to the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.withdraw_funds", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.withdraw_funds", "kind": "function", "doc": "<p>Withdraw funds from the portfolio if there is enough\ncash to allow it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.transact_asset", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.transact_asset", "kind": "function", "doc": "<p>Adjusts positions to account for a transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">txn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.portfolio_to_dict", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.portfolio_to_dict", "kind": "function", "doc": "<p>Output the portfolio holdings information as a dictionary\nwith Assets as keys and sub-dictionaries as values.\nThis excludes cash.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>dict</code>\n    The portfolio holdings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.update_market_value_of_asset", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.update_market_value_of_asset", "kind": "function", "doc": "<p>Update the market value of the asset to the current\ntrade price and date.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">current_price</span>, </span><span class=\"param\"><span class=\"n\">current_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio.Portfolio.history_to_df", "modulename": "qstrader.broker.portfolio.portfolio", "qualname": "Portfolio.history_to_df", "kind": "function", "doc": "<p>Creates a Pandas DataFrame of the Portfolio history.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio_event", "modulename": "qstrader.broker.portfolio.portfolio_event", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent", "kind": "class", "doc": "<p>Stores an individual instance of a portfolio event used to create\nan event trail to track all changes to a portfolio through time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>datetime</code>\n    Datetime of the event.\ntype : <code>str</code>\n    The type of portfolio event, e.g. 'subscription', 'withdrawal'.\ndescription ; <code>str</code>\n    Human-readable portfolio event type.\ndebit : <code>float</code>\n    A debit to the cash balance of the portfolio.\ncredit : <code>float</code>\n    A credit to the cash balance of the portfolio.\nbalance : <code>float</code>\n    The current cash balance of the portfolio.</p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.__init__", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">description</span>, </span><span class=\"param\"><span class=\"n\">debit</span>, </span><span class=\"param\"><span class=\"n\">credit</span>, </span><span class=\"param\"><span class=\"n\">balance</span></span>)</span>"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.dt", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.type", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.description", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.description", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.debit", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.debit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.credit", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.credit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.balance", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.balance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.create_subscription", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.create_subscription", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">credit</span>, </span><span class=\"param\"><span class=\"n\">balance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.create_withdrawal", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.create_withdrawal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">debit</span>, </span><span class=\"param\"><span class=\"n\">balance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.portfolio_event.PortfolioEvent.to_dict", "modulename": "qstrader.broker.portfolio.portfolio_event", "qualname": "PortfolioEvent.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position", "modulename": "qstrader.broker.portfolio.position", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position", "kind": "class", "doc": "<p>Handles the accounting of entering a new position in an\nAsset along with subsequent modifications via additional\ntrades.</p>\n\n<p>The approach taken here separates the long and short side\nfor accounting purposes. It also includes an unrealised and\nrealised running profit &amp; loss of the position.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The Asset symbol string.\ncurrent_price : <code>float</code>\n    The initial price of the Position.\ncurrent_dt : <code>pd.Timestamp</code>\n    The time at which the Position was created.\nbuy_quantity : <code>int</code>\n    The amount of the asset bought.\nsell_quantity : <code>int</code>\n    The amount of the asset sold.\navg_bought : <code>float</code>\n    The initial price paid for buying assets.\navg_sold : <code>float</code>\n    The initial price paid for selling assets.\nbuy_commission : <code>float</code>\n    The commission spent on buying assets for this position.\nsell_commission : <code>float</code>\n    The commission spent on selling assets for this position.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.__init__", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">asset</span>,</span><span class=\"param\">\t<span class=\"n\">current_price</span>,</span><span class=\"param\">\t<span class=\"n\">current_dt</span>,</span><span class=\"param\">\t<span class=\"n\">buy_quantity</span>,</span><span class=\"param\">\t<span class=\"n\">sell_quantity</span>,</span><span class=\"param\">\t<span class=\"n\">avg_bought</span>,</span><span class=\"param\">\t<span class=\"n\">avg_sold</span>,</span><span class=\"param\">\t<span class=\"n\">buy_commission</span>,</span><span class=\"param\">\t<span class=\"n\">sell_commission</span></span>)</span>"}, {"fullname": "qstrader.broker.portfolio.position.Position.asset", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.asset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.current_price", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.current_price", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.current_dt", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.current_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.buy_quantity", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.buy_quantity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.sell_quantity", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.sell_quantity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.avg_bought", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.avg_bought", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.avg_sold", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.avg_sold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.buy_commission", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.buy_commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.sell_commission", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.sell_commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.open_from_transaction", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.open_from_transaction", "kind": "function", "doc": "<p>Constructs a new Position instance from the provided\nTransaction.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>transaction : <code>Transaction</code>\n    The transaction with which to open the Position.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Position</code>\n    The instantiated position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">transaction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position.Position.direction", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.direction", "kind": "variable", "doc": "<p>Returns an integer value representing the direction.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>int</code>\n    1 - Long, 0 - No direction, -1 - Short.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.market_value", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.market_value", "kind": "variable", "doc": "<p>Return the market value (respecting the direction) of the\nPosition based on the current price available to the Position.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The current market value of the Position.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.avg_price", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.avg_price", "kind": "variable", "doc": "<p>The average price paid for all assets on the long or short side.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The average price on either the long or short side.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.net_quantity", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.net_quantity", "kind": "variable", "doc": "<p>The difference in the quantity of assets bought and sold to date.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>int</code>\n    The net quantity of assets.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.total_bought", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.total_bought", "kind": "variable", "doc": "<p>Calculates the total average cost of assets bought.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total average cost of assets bought.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.total_sold", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.total_sold", "kind": "variable", "doc": "<p>Calculates the total average cost of assets sold.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total average cost of assets solds.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.net_total", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.net_total", "kind": "variable", "doc": "<p>Calculates the net total average cost of assets\nbought and sold.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The net total average cost of assets bought\n    and sold.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.commission", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.commission", "kind": "variable", "doc": "<p>Calculates the total commission from assets bought and sold.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total commission from assets bought and sold.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.net_incl_commission", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.net_incl_commission", "kind": "variable", "doc": "<p>Calculates the net total average cost of assets bought\nand sold including the commission.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The net total average cost of assets bought and\n    sold including the commission.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.realised_pnl", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.realised_pnl", "kind": "variable", "doc": "<p>Calculates the profit &amp; loss (P&amp;L) that has been 'realised' via\ntwo opposing asset transactions in the Position to date.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The calculated realised P&amp;L.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.unrealised_pnl", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.unrealised_pnl", "kind": "variable", "doc": "<p>Calculates the profit &amp; loss (P&amp;L) that has yet to be 'realised'\nin the remaining non-zero quantity of assets, due to the current\nmarket price.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The calculated unrealised P&amp;L.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.total_pnl", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.total_pnl", "kind": "variable", "doc": "<p>Calculates the sum of the unrealised and realised profit &amp; loss (P&amp;L).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The sum of the unrealised and realised P&amp;L.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position.Position.update_current_price", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.update_current_price", "kind": "function", "doc": "<p>Updates the Position's awareness of the current market price\nof the Asset, with an optional timestamp.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>market_price : <code>float</code>\n    The current market price.\ndt : <code>pd.Timestamp</code>, optional\n    The optional timestamp of the current market price.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">market_price</span>, </span><span class=\"param\"><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position.Position.transact", "modulename": "qstrader.broker.portfolio.position", "qualname": "Position.transact", "kind": "function", "doc": "<p>Calculates the adjustments to the Position that occur\nonce new units in an Asset are bought and sold.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>transaction : <code>Transaction</code>\n    The Transaction to update the Position with.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transaction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position_handler", "modulename": "qstrader.broker.portfolio.position_handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler", "kind": "class", "doc": "<p>A class that keeps track of, and updates, the current\nlist of Position instances stored in a Portfolio entity.</p>\n"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.__init__", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.__init__", "kind": "function", "doc": "<p>Initialise the PositionHandler object to generate\nan ordered dictionary containing the current positions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.positions", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.positions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.transact_position", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.transact_position", "kind": "function", "doc": "<p>Execute the transaction and update the appropriate\nposition for the transaction's asset accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transaction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.total_market_value", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.total_market_value", "kind": "function", "doc": "<p>Calculate the sum of all the positions' market values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.total_unrealised_pnl", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.total_unrealised_pnl", "kind": "function", "doc": "<p>Calculate the sum of all the positions' unrealised P&amp;Ls.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.total_realised_pnl", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.total_realised_pnl", "kind": "function", "doc": "<p>Calculate the sum of all the positions' realised P&amp;Ls.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.portfolio.position_handler.PositionHandler.total_pnl", "modulename": "qstrader.broker.portfolio.position_handler", "qualname": "PositionHandler.total_pnl", "kind": "function", "doc": "<p>Calculate the sum of all the positions' P&amp;Ls.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker", "modulename": "qstrader.broker.simulated_broker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker", "kind": "class", "doc": "<p>A class to handle simulation of a brokerage that\nprovides sensible defaults for both currency (USD) and\ntransaction cost handling for execution.</p>\n\n<p>The default commission/fee model is a ZeroFeeModel\nthat charges no commission or tax (such as stamp duty).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime of the account\nexchange : <code>Exchange</code>\n    Used to determine whether the simulated exchange venue\n    is open, in order to determine if orders can be executed.\ndata_handler : <code>DataHandler</code>\n    The data handler used to obtain latest asset prices.\naccount_id : <code>str</code>, optional\n    The account ID for the brokerage account.\nbase_currency : <code>str</code>, optional\n    The currency denomination of the brokerage account.\ninitial_funds : <code>float</code>, optional\n    An initial amount of cash to add to the broker account.\nfee_model : <code>FeeModel</code>, optional\n    The commission/fee model used to simulate fees/taxes.\n    Defaults to the ZeroFeeModel.\nslippage_model : <code>SlippageModel</code>, optional\n    The model used to simulate trade slippage.\nmarket_impact_model : <code>MarketImpactModel</code>, optional\n    The model used to simulate market impact of trading.</p>\n", "bases": "qstrader.broker.broker.Broker"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.__init__", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_dt</span>,</span><span class=\"param\">\t<span class=\"n\">exchange</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base_currency</span><span class=\"o\">=</span><span class=\"s1\">&#39;USD&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">initial_funds</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">fee_model</span><span class=\"o\">=&lt;</span><span class=\"n\">qstrader</span><span class=\"o\">.</span><span class=\"n\">broker</span><span class=\"o\">.</span><span class=\"n\">fee_model</span><span class=\"o\">.</span><span class=\"n\">zero_fee_model</span><span class=\"o\">.</span><span class=\"n\">ZeroFeeModel</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">slippage_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">market_impact_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.start_dt", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.exchange", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.exchange", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.data_handler", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.current_dt", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.current_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.account_id", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.account_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.base_currency", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.base_currency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.initial_funds", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.initial_funds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.fee_model", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.fee_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.slippage_model", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.slippage_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.market_impact_model", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.market_impact_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.cash_balances", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.cash_balances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.portfolios", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.portfolios", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.open_orders", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.open_orders", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.subscribe_funds_to_account", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.subscribe_funds_to_account", "kind": "function", "doc": "<p>Subscribe an amount of cash in the base currency\nto the broker master cash account.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>amount : <code>float</code>\n    The amount of cash to subscribe to the master account.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.withdraw_funds_from_account", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.withdraw_funds_from_account", "kind": "function", "doc": "<p>Withdraws an amount of cash in the base currency\nfrom the broker master cash account, assuming an\namount equal to or more cash is present. If less\ncash is present, a ValueError is raised.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>amount : <code>float</code>\n    The amount of cash to withdraw from the master account.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_account_cash_balance", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_account_cash_balance", "kind": "function", "doc": "<p>Retrieve the cash dictionary of the account, or\nif a currency is provided, the cash value itself.\nRaises a ValueError if the currency is not\nfound within the currency cash dictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>currency : <code>str</code>, optional\n    The currency string to obtain the cash balance for.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_account_total_market_value", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_account_total_market_value", "kind": "function", "doc": "<p>Retrieve the total market value of the account, across\neach portfolio.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>dict</code>\n    The dictionary of each portfolio's total market value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_account_total_equity", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_account_total_equity", "kind": "function", "doc": "<p>Retrieve the total equity of the account, across\neach portfolio.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>dict</code>\n    The dictionary of each portfolio's total equity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.create_portfolio", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.create_portfolio", "kind": "function", "doc": "<p>Create a new sub-portfolio with ID 'portfolio_id' and\nan optional name given by 'name'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.\nname : <code>str</code>, optional\n    The optional name string of the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.list_all_portfolios", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.list_all_portfolios", "kind": "function", "doc": "<p>List all of the sub-portfolios associated with this\nbroker account in order of portfolio ID.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>list</code>\n    The list of portfolios associated with the broker account.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.subscribe_funds_to_portfolio", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.subscribe_funds_to_portfolio", "kind": "function", "doc": "<p>Subscribe funds to a particular sub-portfolio, assuming\nit exists and the cash amount is positive. Otherwise raise\na ValueError.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.\namount : <code>float</code>\n    The amount of cash to subscribe to the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.withdraw_funds_from_portfolio", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.withdraw_funds_from_portfolio", "kind": "function", "doc": "<p>Withdraw funds from a particular sub-portfolio, assuming\nit exists, the cash amount is positive and there is\nsufficient remaining cash in the sub-portfolio to\nwithdraw. Otherwise raise a ValueError.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.\namount : <code>float</code>\n    The amount of cash to withdraw from the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_portfolio_cash_balance", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_portfolio_cash_balance", "kind": "function", "doc": "<p>Retrieve the cash balance of a sub-portfolio, if\nit exists. Otherwise raise a ValueError.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The cash balance of the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_portfolio_total_market_value", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_portfolio_total_market_value", "kind": "function", "doc": "<p>Returns the current total market value of a Portfolio\nwith ID 'portfolio_id'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total market value of the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_portfolio_total_equity", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_portfolio_total_equity", "kind": "function", "doc": "<p>Returns the current total equity of a Portfolio\nwith ID 'portfolio_id'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The total equity of the portfolio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.get_portfolio_as_dict", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.get_portfolio_as_dict", "kind": "function", "doc": "<p>Return a particular portfolio with ID 'portolio_id' as\na dictionary with Asset symbol strings as keys, with various\nattributes as sub-dictionaries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>dict{str}</code>\n    The portfolio representation of Assets as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.submit_order", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.submit_order", "kind": "function", "doc": "<p>Execute an Order instance against the sub-portfolio\nwith ID 'portfolio_id'. For the SimulatedBroker class\nspecifically there are no restrictions on this occuring\nbeyond having sufficient cash in the sub-portfolio to\nallow this to occur.</p>\n\n<p>This does not take into settlement dates, as with most\nbrokerage accounts. The cash is taken immediately upon\nentering a long position and returned immediately upon\nclosing out the position.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>portfolio_id : <code>str</code>\n    The portfolio ID string.\norder : <code>Order</code>\n    The Order instance to submit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">order</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.simulated_broker.SimulatedBroker.update", "modulename": "qstrader.broker.simulated_broker", "qualname": "SimulatedBroker.update", "kind": "function", "doc": "<p>Updates the current SimulatedBroker timestamp.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The current timestamp to update the Broker to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.broker.transaction", "modulename": "qstrader.broker.transaction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction", "modulename": "qstrader.broker.transaction.transaction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction", "kind": "class", "doc": "<p>Handles the transaction of an asset, as used in the\nPosition class.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol of the transaction\nquantity : <code>int</code>\n    Whole number quantity of shares in the transaction\ndt : <code>pd.Timestamp</code>\n    The date/time of the transaction\nprice : <code>float</code>\n    The transaction price carried out\norder_id : <code>int</code>\n    The unique order identifier\ncommission : <code>float</code>, optional\n    The trading commission</p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.__init__", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">quantity</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">price</span>, </span><span class=\"param\"><span class=\"n\">order_id</span>, </span><span class=\"param\"><span class=\"n\">commission</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.asset", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.asset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.quantity", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.quantity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.direction", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.dt", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.price", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.price", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.order_id", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.order_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.commission", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.cost_without_commission", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.cost_without_commission", "kind": "variable", "doc": "<p>Calculate the cost of the transaction without including\nany commission costs.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The transaction cost without commission.</p>\n"}, {"fullname": "qstrader.broker.transaction.transaction.Transaction.cost_with_commission", "modulename": "qstrader.broker.transaction.transaction", "qualname": "Transaction.cost_with_commission", "kind": "variable", "doc": "<p>Calculate the cost of the transaction including\nany commission costs.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The transaction cost with commission.</p>\n"}, {"fullname": "qstrader.data", "modulename": "qstrader.data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.backtest_data_handler", "modulename": "qstrader.data.backtest_data_handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.__init__", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">data_sources</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.universe", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.data_sources", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.data_sources", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.get_asset_latest_bid_price", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.get_asset_latest_bid_price", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset_symbol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.get_asset_latest_ask_price", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.get_asset_latest_ask_price", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset_symbol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.get_asset_latest_bid_ask_price", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.get_asset_latest_bid_ask_price", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset_symbol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.get_asset_latest_mid_price", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.get_asset_latest_mid_price", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset_symbol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.backtest_data_handler.BacktestDataHandler.get_assets_historical_range_close_price", "modulename": "qstrader.data.backtest_data_handler", "qualname": "BacktestDataHandler.get_assets_historical_range_close_price", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">end_dt</span>, </span><span class=\"param\"><span class=\"n\">asset_symbols</span>, </span><span class=\"param\"><span class=\"n\">adjusted</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.daily_bar_csv", "modulename": "qstrader.data.daily_bar_csv", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource", "kind": "class", "doc": "<p>Encapsulates loading, preparation and querying of CSV files of\ndaily 'bar' OHLCV data. The CSV files are converted into a intraday\ntimestamped Pandas DataFrame with opening and closing prices.</p>\n\n<p>Optionally utilises adjusted closing prices (if available) to\nadjust both the close and open.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>csv_dir : <code>str</code>\n    The full path to the directory where the CSV is located.\nasset_type : <code>str</code>\n    The asset type that the price/volume data is for.\n    TODO: Unused at this stage and currently hardcoded to Equity.\nadjust_prices : <code>Boolean</code>, optional\n    Whether to utilise corporate-action adjusted prices for both\n    the open and closing prices. Defaults to True.\ncsv_symbols : <code>list</code>, optional\n    An optional list of CSV symbols to restrict the data source to.\n    The alternative is to convert all CSVs found within the\n    provided directory.</p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.__init__", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_dir</span>, </span><span class=\"param\"><span class=\"n\">asset_type</span>, </span><span class=\"param\"><span class=\"n\">adjust_prices</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">csv_symbols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.csv_dir", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.csv_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.asset_type", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.asset_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.adjust_prices", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.adjust_prices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.csv_symbols", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.csv_symbols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.asset_bar_frames", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.asset_bar_frames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.asset_bid_ask_frames", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.asset_bid_ask_frames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.get_bid", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.get_bid", "kind": "function", "doc": "<p>Obtain the bid price of an asset at the provided timestamp.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    When to obtain the bid price for.\nasset : <code>str</code>\n    The asset symbol to obtain the bid price for.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The bid price.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.get_ask", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.get_ask", "kind": "function", "doc": "<p>Obtain the ask price of an asset at the provided timestamp.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    When to obtain the ask price for.\nasset : <code>str</code>\n    The asset symbol to obtain the ask price for.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>float</code>\n    The ask price.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">asset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.data.daily_bar_csv.CSVDailyBarDataSource.get_assets_historical_closes", "modulename": "qstrader.data.daily_bar_csv", "qualname": "CSVDailyBarDataSource.get_assets_historical_closes", "kind": "function", "doc": "<p>Obtain a multi-asset historical range of closing prices as a DataFrame,\nindexed by timestamp with asset symbols as columns.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime of the range to obtain.\nend_dt : <code>pd.Timestamp</code>\n    The ending datetime of the range to obtain.\nassets : <code>list[str]</code>\n    The list of asset symbols to obtain closing prices for.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>pd.DataFrame</code>\n    The multi-asset closing prices DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">end_dt</span>, </span><span class=\"param\"><span class=\"n\">assets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.exchange", "modulename": "qstrader.exchange", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.exchange", "modulename": "qstrader.exchange.exchange", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.exchange.Exchange", "modulename": "qstrader.exchange.exchange", "qualname": "Exchange", "kind": "class", "doc": "<p>Interface to a trading exchange such as the NYSE or LSE.\nThis class family is only required for simulations, rather than\nlive or paper trading.</p>\n\n<p>It exposes methods for obtaining calendar capability\nfor trading opening times and market events.</p>\n"}, {"fullname": "qstrader.exchange.exchange.Exchange.is_open_at_datetime", "modulename": "qstrader.exchange.exchange", "qualname": "Exchange.is_open_at_datetime", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.exchange.simulated_exchange", "modulename": "qstrader.exchange.simulated_exchange", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange", "kind": "class", "doc": "<p>The SimulatedExchange class is used to model a live\ntrading venue.</p>\n\n<p>It exposes methods to inform a client class intance of\nwhen the exchange is open to determine when orders can\nbe executed.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting time of the simulated exchange.</p>\n", "bases": "qstrader.exchange.exchange.Exchange"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange.__init__", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span></span>)</span>"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange.start_dt", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange.open_dt", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange.open_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange.close_dt", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange.close_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.exchange.simulated_exchange.SimulatedExchange.is_open_at_datetime", "modulename": "qstrader.exchange.simulated_exchange", "qualname": "SimulatedExchange.is_open_at_datetime", "kind": "function", "doc": "<p>Check if the SimulatedExchange is open at a particular\nprovided pandas Timestamp.</p>\n\n<p>This logic is simplistic in that it only checks whether\nthe provided time is between market hours on a weekday.</p>\n\n<p>There is no historical calendar handling or concept of\nexchange holidays.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The timestamp to check for open market hours.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Boolean</code>\n    Whether the exchange is open at this timestamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.execution", "modulename": "qstrader.execution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_algo", "modulename": "qstrader.execution.execution_algo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_algo.execution_algo", "modulename": "qstrader.execution.execution_algo.execution_algo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_algo.execution_algo.ExecutionAlgorithm", "modulename": "qstrader.execution.execution_algo.execution_algo", "qualname": "ExecutionAlgorithm", "kind": "class", "doc": "<p>Callable which takes in a list of desired rebalance Orders\nand outputs a new Order list with a particular execution\nalgorithm strategy.</p>\n"}, {"fullname": "qstrader.execution.execution_algo.market_order", "modulename": "qstrader.execution.execution_algo.market_order", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_algo.market_order.MarketOrderExecutionAlgorithm", "modulename": "qstrader.execution.execution_algo.market_order", "qualname": "MarketOrderExecutionAlgorithm", "kind": "class", "doc": "<p>Simple execution algorithm that creates an unmodified list\nof market Orders from the rebalance Orders.</p>\n", "bases": "qstrader.execution.execution_algo.execution_algo.ExecutionAlgorithm"}, {"fullname": "qstrader.execution.execution_handler", "modulename": "qstrader.execution.execution_handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler", "kind": "class", "doc": "<p>Handles the execution of a list of Orders output by the\nPortfolioConstructionModel via the Broker.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>broker : <code>Broker</code>\n    The derived Broker instance to execute orders against.\nbroker_portfolio_id : <code>str</code>\n    The specific portfolio at the Broker to execute against.\nuniverse : <code>Universe</code>\n    The derived Universe instance to obtain the Asset list from.\nsubmit_orders : <code>Boolean</code>, optional\n    Whether to actually submit orders to the Broker or silently\n    discard them. Defaults to False -> Do not send orders.\nexecution_algo : <code>ExecutionAlgorithm</code>, optional\n    The derived ExecutionAlgorithm instance to use for the\n    execution strategy.\ndata_handler : <code>DataHandler</code>, optional\n    The derived DataHandler instances used to (optionally) obtain any\n    necessary data for the execution strategy.</p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.__init__", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">broker</span>,</span><span class=\"param\">\t<span class=\"n\">broker_portfolio_id</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span>,</span><span class=\"param\">\t<span class=\"n\">submit_orders</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">execution_algo</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.broker", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.broker_portfolio_id", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.broker_portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.universe", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.submit_orders", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.submit_orders", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.execution_algo", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.execution_algo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.execution_handler.ExecutionHandler.data_handler", "modulename": "qstrader.execution.execution_handler", "qualname": "ExecutionHandler.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order", "modulename": "qstrader.execution.order", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order", "modulename": "qstrader.execution.order", "qualname": "Order", "kind": "class", "doc": "<p>Represents sending an order from a trading algo entity\nto a brokerage to execute.</p>\n\n<p>A commission can be added here to override the commission\nmodel, if known. An order_id can be added if required,\notherwise it will be randomly assigned.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The date-time that the order was created.\nasset : <code>Asset</code>\n    The asset to transact with the order.\nquantity : <code>int</code>\n    The quantity of the asset to transact.\n    A negative quantity means a short.\ncommission : <code>float</code>, optional\n    If commission is known it can be added.\norder_id : <code>str</code>, optional\n    The order ID of the order, if known.</p>\n"}, {"fullname": "qstrader.execution.order.Order.__init__", "modulename": "qstrader.execution.order", "qualname": "Order.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dt</span>,</span><span class=\"param\">\t<span class=\"n\">asset</span>,</span><span class=\"param\">\t<span class=\"n\">quantity</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;MARKET&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">limit_price</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.execution.order.Order.created_dt", "modulename": "qstrader.execution.order", "qualname": "Order.created_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.cur_dt", "modulename": "qstrader.execution.order", "qualname": "Order.cur_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.asset", "modulename": "qstrader.execution.order", "qualname": "Order.asset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.quantity", "modulename": "qstrader.execution.order", "qualname": "Order.quantity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.commission", "modulename": "qstrader.execution.order", "qualname": "Order.commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.direction", "modulename": "qstrader.execution.order", "qualname": "Order.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.order_id", "modulename": "qstrader.execution.order", "qualname": "Order.order_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.order_type", "modulename": "qstrader.execution.order", "qualname": "Order.order_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.limit_price", "modulename": "qstrader.execution.order", "qualname": "Order.limit_price", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.execution.order.Order.is_limit_order", "modulename": "qstrader.execution.order", "qualname": "Order.is_limit_order", "kind": "function", "doc": "<p>Checks if the order is a limit order.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>bool</code>\n    True if the order is a limit order, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.portcon", "modulename": "qstrader.portcon", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser", "modulename": "qstrader.portcon.optimiser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.equal_weight", "modulename": "qstrader.portcon.optimiser.equal_weight", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.equal_weight.EqualWeightPortfolioOptimiser", "modulename": "qstrader.portcon.optimiser.equal_weight", "qualname": "EqualWeightPortfolioOptimiser", "kind": "class", "doc": "<p>Produces a dictionary keyed by Asset with (optionally) scaled\nequal weights. Without scaling this is normalised to ensure vector\nsums to unity. This overrides the weights provided in the initial_weights\ndictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>scale : <code>float</code>, optional\n    An optional scale factor to adjust the weights by. Otherwise vector\n    is set to sum to unity.\ndata_handler : <code>DataHandler</code>, optional\n    An optional DataHandler used to preserve interface across\n    PortfolioOptimisers.</p>\n", "bases": "qstrader.portcon.optimiser.optimiser.PortfolioOptimiser"}, {"fullname": "qstrader.portcon.optimiser.equal_weight.EqualWeightPortfolioOptimiser.__init__", "modulename": "qstrader.portcon.optimiser.equal_weight", "qualname": "EqualWeightPortfolioOptimiser.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.portcon.optimiser.equal_weight.EqualWeightPortfolioOptimiser.scale", "modulename": "qstrader.portcon.optimiser.equal_weight", "qualname": "EqualWeightPortfolioOptimiser.scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.equal_weight.EqualWeightPortfolioOptimiser.data_handler", "modulename": "qstrader.portcon.optimiser.equal_weight", "qualname": "EqualWeightPortfolioOptimiser.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.fixed_weight", "modulename": "qstrader.portcon.optimiser.fixed_weight", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.fixed_weight.FixedWeightPortfolioOptimiser", "modulename": "qstrader.portcon.optimiser.fixed_weight", "qualname": "FixedWeightPortfolioOptimiser", "kind": "class", "doc": "<p>Produces a dictionary keyed by Asset with that utilises the weights\nprovided directly. This simply 'passes through' the provided weights\nwithout modification.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data_handler : <code>DataHandler</code>, optional\n    An optional DataHandler used to preserve interface across\n    TargetWeightGenerators.</p>\n", "bases": "qstrader.portcon.optimiser.optimiser.PortfolioOptimiser"}, {"fullname": "qstrader.portcon.optimiser.fixed_weight.FixedWeightPortfolioOptimiser.__init__", "modulename": "qstrader.portcon.optimiser.fixed_weight", "qualname": "FixedWeightPortfolioOptimiser.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.portcon.optimiser.fixed_weight.FixedWeightPortfolioOptimiser.data_handler", "modulename": "qstrader.portcon.optimiser.fixed_weight", "qualname": "FixedWeightPortfolioOptimiser.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.optimiser", "modulename": "qstrader.portcon.optimiser.optimiser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.optimiser.optimiser.PortfolioOptimiser", "modulename": "qstrader.portcon.optimiser.optimiser", "qualname": "PortfolioOptimiser", "kind": "class", "doc": "<p>Abstract interface for a PortfolioOptimiser callable.</p>\n\n<p>A derived-class instance of PortfolioOptimisertakes in\na list of Assets (not an Asset Universe) and an optional\nDataHandler instance in order to generate target weights\nfor Assets.</p>\n\n<p>These are then potentially modified by the PortfolioConstructionModel,\nwhich generates a list of rebalance Orders.</p>\n\n<p>Implementing __call__ produces a dictionary keyed by\nAsset and with a scalar value as the weight.</p>\n"}, {"fullname": "qstrader.portcon.order_sizer", "modulename": "qstrader.portcon.order_sizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer", "kind": "class", "doc": "<p>Creates a target portfolio of quantities for each Asset\nusing its provided weight and total equity available in the\nBroker portfolio.</p>\n\n<p>Includes an optional cash buffer due to the non-fractional amount\nof share/unit sizes. The cash buffer defaults to 5% of the total\nequity, but can be modified.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>broker : <code>Broker</code>\n    The derived Broker instance to obtain portfolio equity from.\nbroker_portfolio_id : <code>str</code>\n    The specific portfolio at the Broker to obtain equity from.\ndata_handler : <code>DataHandler</code>\n    To obtain latest asset prices from.\ncash_buffer_percentage : <code>float</code>, optional\n    The percentage of the portfolio equity to retain in\n    cash to avoid generating Orders that exceed account\n    equity (assuming no margin available).</p>\n", "bases": "qstrader.portcon.order_sizer.order_sizer.OrderSizer"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer.__init__", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">broker</span>,</span><span class=\"param\">\t<span class=\"n\">broker_portfolio_id</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span>,</span><span class=\"param\">\t<span class=\"n\">cash_buffer_percentage</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span>)</span>"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer.broker", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer.broker_portfolio_id", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer.broker_portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer.data_handler", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.dollar_weighted.DollarWeightedCashBufferedOrderSizer.cash_buffer_percentage", "modulename": "qstrader.portcon.order_sizer.dollar_weighted", "qualname": "DollarWeightedCashBufferedOrderSizer.cash_buffer_percentage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.long_short", "modulename": "qstrader.portcon.order_sizer.long_short", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer", "kind": "class", "doc": "<p>Creates a target portfolio of quantities for each Asset\nusing its provided weight and total equity available in the\nBroker portfolio, leveraging up if necessary via the supplied\ngross leverage.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>broker : <code>Broker</code>\n    The derived Broker instance to obtain portfolio equity from.\nbroker_portfolio_id : <code>str</code>\n    The specific portfolio at the Broker to obtain equity from.\ndata_handler : <code>DataHandler</code>\n    To obtain latest asset prices from.\ngross_leverage : <code>float</code>, optional\n    The amount of percentage leverage to use when sizing orders.</p>\n", "bases": "qstrader.portcon.order_sizer.order_sizer.OrderSizer"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer.__init__", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">broker</span>, </span><span class=\"param\"><span class=\"n\">broker_portfolio_id</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span>, </span><span class=\"param\"><span class=\"n\">gross_leverage</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer.broker", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer.broker_portfolio_id", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer.broker_portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer.data_handler", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.long_short.LongShortLeveragedOrderSizer.gross_leverage", "modulename": "qstrader.portcon.order_sizer.long_short", "qualname": "LongShortLeveragedOrderSizer.gross_leverage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.order_sizer", "modulename": "qstrader.portcon.order_sizer.order_sizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.order_sizer.order_sizer.OrderSizer", "modulename": "qstrader.portcon.order_sizer.order_sizer", "qualname": "OrderSizer", "kind": "class", "doc": "<p>Creates a target portfolio of quantities for each Asset\nusing its provided weight and total equity available in the Broker portfolio.</p>\n"}, {"fullname": "qstrader.portcon.pcm", "modulename": "qstrader.portcon.pcm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel", "kind": "class", "doc": "<p>Encapsulates the process of generating a target weight vector\nfor a universe of assets, based on input from an AlphaModel,\na RiskModel and a TransactionCostModel.</p>\n\n<p>The optimisation process itself is delegated to a TargetWeightGenerator\ninstance provided an instantiation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>broker : <code>Broker</code>\n    The derived Broker instance to obtain the current portfolio from.\nbroker_portfolio_id : <code>str</code>\n    The specific portfolio at the Broker to obtain positions from.\nuniverse : <code>Universe</code>\n    The Universe on which to construct a portfolio.\norder_sizer : <code>OrderSizeGenerator</code>\n    Converts target weights into integral positions.\noptimiser : <code>PortfolioOptimiser</code>\n    The optimisation mechanism for generating the target weights,\nalpha_model : <code>AlphaModel</code>, optional\n    The optional alpha/forecasting signal model for Assets in the Universe,\nrisk_model : <code>RiskModel</code>, optional\n    The optional risk model for Assets in the Universe.\ncost_model : <code>TransactionCostModel</code>, optional\n    The optional transaction cost model for Assets in the Universe.\ndata_handler : <code>DataHandler</code>, optional\n    The optional data handler used within portfolio construction.</p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.__init__", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">broker</span>,</span><span class=\"param\">\t<span class=\"n\">broker_portfolio_id</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span>,</span><span class=\"param\">\t<span class=\"n\">order_sizer</span>,</span><span class=\"param\">\t<span class=\"n\">optimiser</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">risk_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cost_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.broker", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.broker_portfolio_id", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.broker_portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.universe", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.order_sizer", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.order_sizer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.optimiser", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.optimiser", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.alpha_model", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.alpha_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.risk_model", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.risk_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.cost_model", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.cost_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.portcon.pcm.PortfolioConstructionModel.data_handler", "modulename": "qstrader.portcon.pcm", "qualname": "PortfolioConstructionModel.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.risk_model", "modulename": "qstrader.risk_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.risk_model.risk_model", "modulename": "qstrader.risk_model.risk_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.risk_model.risk_model.RiskModel", "modulename": "qstrader.risk_model.risk_model", "qualname": "RiskModel", "kind": "class", "doc": "<p>Abstract interface for an RiskModel callable.</p>\n\n<p>A derived-class instance of RiskModel takes in an Asset\nUniverse and an optional DataHandler instance in order\nto modify weights on Assets generated by an AlphaModel.</p>\n\n<p>These adjusted weights are used within the PortfolioConstructionModel\nto generate new target weights for the portfolio.</p>\n\n<p>Implementing __call__ produces a dictionary keyed by\nAsset and with a scalar value as the signal.</p>\n"}, {"fullname": "qstrader.settings", "modulename": "qstrader.settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.settings.SUPPORTED", "modulename": "qstrader.settings", "qualname": "SUPPORTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;CURRENCIES&#x27;: [&#x27;USD&#x27;, &#x27;GBP&#x27;, &#x27;EUR&#x27;], &#x27;FEE_MODEL&#x27;: {&#x27;ZeroFeeModel&#x27;: &#x27;qstrader.broker.fee_model.zero_fee_model&#x27;}}"}, {"fullname": "qstrader.settings.LOGGING", "modulename": "qstrader.settings", "qualname": "LOGGING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;DATE_FORMAT&#x27;: &#x27;%Y-%m-%d %H:%M:%S&#x27;}"}, {"fullname": "qstrader.settings.PRINT_EVENTS", "modulename": "qstrader.settings", "qualname": "PRINT_EVENTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "qstrader.settings.set_print_events", "modulename": "qstrader.settings", "qualname": "set_print_events", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">print_events</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals", "modulename": "qstrader.signals", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.buffer", "modulename": "qstrader.signals.buffer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers", "kind": "class", "doc": "<p>Utility class to store double-ended queue (\"deque\")\nbased price buffers for usage in lookback-based\nindicator calculations.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>assets : <code>list[str]</code>\n    The list of assets to create price buffers for.\nlookbacks : <code>list[int]</code>, optional\n    The number of lookback periods to store prices for.</p>\n"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.__init__", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">assets</span>, </span><span class=\"param\"><span class=\"n\">lookbacks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.assets", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.assets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.lookbacks", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.lookbacks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.prices", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.prices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.add_asset", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.add_asset", "kind": "function", "doc": "<p>Add an asset to the list of current assets. This is necessary if\nthe asset is part of a DynamicUniverse and isn't present at\nthe beginning of a backtest.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals.buffer.AssetPriceBuffers.append", "modulename": "qstrader.signals.buffer", "qualname": "AssetPriceBuffers.append", "kind": "function", "doc": "<p>Append a new price onto the price deque for\nthe specific asset provided.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol name.\nprice : <code>float</code>\n    The new price of the asset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">price</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals.momentum", "modulename": "qstrader.signals.momentum", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.momentum.MomentumSignal", "modulename": "qstrader.signals.momentum", "qualname": "MomentumSignal", "kind": "class", "doc": "<p>Indicator class to calculate lookback-period momentum\n(based on cumulative return of last N periods) for\na set of prices.</p>\n\n<p>If the number of available returns is less than the\nlookback parameter the momentum is calculated on\nthis subset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime (UTC) of the signal.\nuniverse : <code>Universe</code>\n    The universe of assets to calculate the signals for.\nlookbacks : <code>list[int]</code>\n    The number of lookback periods to store prices for.</p>\n", "bases": "qstrader.signals.signal.Signal"}, {"fullname": "qstrader.signals.momentum.MomentumSignal.__init__", "modulename": "qstrader.signals.momentum", "qualname": "MomentumSignal.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">lookbacks</span></span>)</span>"}, {"fullname": "qstrader.signals.signal", "modulename": "qstrader.signals.signal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal", "modulename": "qstrader.signals.signal", "qualname": "Signal", "kind": "class", "doc": "<p>Abstract class to provide historical price range-based\nrolling signals utilising deque-based 'buffers'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime (UTC) of the signal.\nuniverse : <code>Universe</code>\n    The universe of assets to calculate the signals for.\nlookbacks : <code>list[int]</code>\n    The number of lookback periods to store prices for.</p>\n"}, {"fullname": "qstrader.signals.signal.Signal.__init__", "modulename": "qstrader.signals.signal", "qualname": "Signal.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">lookbacks</span></span>)</span>"}, {"fullname": "qstrader.signals.signal.Signal.start_dt", "modulename": "qstrader.signals.signal", "qualname": "Signal.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal.universe", "modulename": "qstrader.signals.signal", "qualname": "Signal.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal.lookbacks", "modulename": "qstrader.signals.signal", "qualname": "Signal.lookbacks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal.assets", "modulename": "qstrader.signals.signal", "qualname": "Signal.assets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal.buffers", "modulename": "qstrader.signals.signal", "qualname": "Signal.buffers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signal.Signal.append", "modulename": "qstrader.signals.signal", "qualname": "Signal.append", "kind": "function", "doc": "<p>Append a new price onto the price buffer for\nthe specific asset provided.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>asset : <code>str</code>\n    The asset symbol name.\nprice : <code>float</code>\n    The new price of the asset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">asset</span>, </span><span class=\"param\"><span class=\"n\">price</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals.signal.Signal.update_assets", "modulename": "qstrader.signals.signal", "qualname": "Signal.update_assets", "kind": "function", "doc": "<p>Ensure that any new additions to the universe also receive\na price buffer at the point at which they enter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The update timestamp for the signal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals.signals_collection", "modulename": "qstrader.signals.signals_collection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection", "kind": "class", "doc": "<p>Provides a mechanism for aggregating all signals\nused by AlphaModels or RiskModels.</p>\n\n<p>Keeps track of updating the asset universe for each signal\nif a DynamicUniverse is utilised.</p>\n\n<p>Ensures each signal receives a new data point at the\nappropriate simulation iteration rate.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>signals : <code>dict{str: Signal}</code>\n    Map of signal name to derived instance of Signal\ndata_handler : <code>DataHandler</code>\n    The data handler used to obtain pricing.</p>\n"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection.__init__", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">signals</span>, </span><span class=\"param\"><span class=\"n\">data_handler</span></span>)</span>"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection.signals", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection.signals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection.data_handler", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection.warmup", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection.warmup", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.signals_collection.SignalsCollection.update", "modulename": "qstrader.signals.signals_collection", "qualname": "SignalsCollection.update", "kind": "function", "doc": "<p>Updates the universe (if dynamic) for each signal as well\nas the pricing information for this timestamp.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dt : <code>pd.Timestamp</code>\n    The time at which the signals are to be updated for.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.signals.sma", "modulename": "qstrader.signals.sma", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.sma.SMASignal", "modulename": "qstrader.signals.sma", "qualname": "SMASignal", "kind": "class", "doc": "<p>Indicator class to calculate simple moving average\nof last N periods for a set of prices.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime (UTC) of the signal.\nuniverse : <code>Universe</code>\n    The universe of assets to calculate the signals for.\nlookbacks : <code>list[int]</code>\n    The number of lookback periods to store prices for.</p>\n", "bases": "qstrader.signals.signal.Signal"}, {"fullname": "qstrader.signals.sma.SMASignal.__init__", "modulename": "qstrader.signals.sma", "qualname": "SMASignal.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">lookbacks</span></span>)</span>"}, {"fullname": "qstrader.signals.vol", "modulename": "qstrader.signals.vol", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.signals.vol.VolatilitySignal", "modulename": "qstrader.signals.vol", "qualname": "VolatilitySignal", "kind": "class", "doc": "<p>Indicator class to calculate lookback-period daily\nvolatility of returns, which is then annualised.</p>\n\n<p>If the number of available returns is less than the\nlookback parameter the volatility is calculated on\nthis subset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime (UTC) of the signal.\nuniverse : <code>Universe</code>\n    The universe of assets to calculate the signals for.\nlookbacks : <code>list[int]</code>\n    The number of lookback periods to store prices for.</p>\n", "bases": "qstrader.signals.signal.Signal"}, {"fullname": "qstrader.signals.vol.VolatilitySignal.__init__", "modulename": "qstrader.signals.vol", "qualname": "VolatilitySignal.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">universe</span>, </span><span class=\"param\"><span class=\"n\">lookbacks</span></span>)</span>"}, {"fullname": "qstrader.simulation", "modulename": "qstrader.simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday", "modulename": "qstrader.simulation.daily_bday", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine", "kind": "class", "doc": "<p>A SimulationEngine subclass that generates events on a daily\nfrequency defaulting to typical business days, that is\nMonday-Friday.</p>\n\n<p>In particular it does not take into account any specific\nregional holidays, such as Federal Holidays in the USA or\nBank Holidays in the UK.</p>\n\n<p>It produces a pre-market event, a market open event,\na market closing event and a post-market event for every day\nbetween the starting and ending dates.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>starting_day : <code>pd.Timestamp</code>\n    The starting day of the simulation.\nending_day : <code>pd.Timestamp</code>\n    The ending day of the simulation.\npre_market : <code>Boolean</code>, optional\n    Whether to include a pre-market event\npost_market : <code>Boolean</code>, optional\n    Whether to include a post-market event</p>\n", "bases": "qstrader.simulation.sim_engine.SimulationEngine"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.__init__", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">starting_day</span>, </span><span class=\"param\"><span class=\"n\">ending_day</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">post_market</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.starting_day", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.starting_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.ending_day", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.ending_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.pre_market", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.pre_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.post_market", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.post_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessDaysSimulationEngine.business_days", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessDaysSimulationEngine.business_days", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine", "kind": "class", "doc": "<p>A SimulationEngine subclass that generates events on a hourly\nfrequency limited to hours on typical business days\nbetween the starting and ending dates. Business days are from\nMonday to Friday. Defaulting to event within trading hours,\nthat is 14:30 to 21:00 UTC every business day. Events only\noccur on whole hours. With pre_market set events before 14:30\nare generated as well and with post_market set the events\nafter 21:00 are generated as well. es.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>starting_day : <code>pd.Timestamp</code>\n    The starting day of the simulation.\nending_day : <code>pd.Timestamp</code>\n    The ending day of the simulation.\npre_market : <code>Boolean</code>, optional\n    Whether to include a pre-market event\npost_market : <code>Boolean</code>, optional\n    Whether to include a post-market event</p>\n", "bases": "qstrader.simulation.sim_engine.SimulationEngine"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.__init__", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">starting_day</span>, </span><span class=\"param\"><span class=\"n\">ending_day</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">post_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.starting_day", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.starting_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.ending_day", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.ending_day", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.pre_market", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.pre_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.post_market", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.post_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.daily_bday.BusinessHoursSimulationEngine.business_events", "modulename": "qstrader.simulation.daily_bday", "qualname": "BusinessHoursSimulationEngine.business_events", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.event", "modulename": "qstrader.simulation.event", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.event.SimulationEvent", "modulename": "qstrader.simulation.event", "qualname": "SimulationEvent", "kind": "class", "doc": "<p>Stores a timestamp and event type string associated with\na simulation event.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ts : <code>pd.Timestamp</code>\n    The timestamp of the simulation event.\nevent_type : <code>str</code>\n    The event type string.</p>\n"}, {"fullname": "qstrader.simulation.event.SimulationEvent.__init__", "modulename": "qstrader.simulation.event", "qualname": "SimulationEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ts</span>, </span><span class=\"param\"><span class=\"n\">event_type</span></span>)</span>"}, {"fullname": "qstrader.simulation.event.SimulationEvent.ts", "modulename": "qstrader.simulation.event", "qualname": "SimulationEvent.ts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.event.SimulationEvent.event_type", "modulename": "qstrader.simulation.event", "qualname": "SimulationEvent.event_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.sim_engine", "modulename": "qstrader.simulation.sim_engine", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.simulation.sim_engine.SimulationEngine", "modulename": "qstrader.simulation.sim_engine", "qualname": "SimulationEngine", "kind": "class", "doc": "<p>Interface to a tradinh event simulation engine.</p>\n\n<p>Subclasses are designed to take starting and ending\ntimestamps to generate events at a specific frequency.</p>\n\n<p>This is achieved by overriding __iter__ and yielding Event\nentities. These entities would include signalling an exchange\nopening, an exchange closing, as well as pre- and post-opening\nevents to allow handling of cash-flows and corporate actions.</p>\n\n<p>In this way the necessary events can be carried out for\nthe entities in the system, such as dividend handling,\ncapital changes, performance calculations and trading\norders.</p>\n"}, {"fullname": "qstrader.statistics", "modulename": "qstrader.statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics", "modulename": "qstrader.statistics.json_statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics", "kind": "class", "doc": "<p>Standalone class to output basic backtesting statistics\ninto a JSON file format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>equity_curve : <code>pd.DataFrame</code>\n    The equity curve DataFrame indexed by date-time.\nstrategy_id : <code>str</code>, optional\n    The optional ID string for the strategy to pass to\n    the statistics dict.\nstrategy_name : <code>str</code>, optional\n    The optional name string for the strategy to pass to\n    the statistics dict.\nbenchmark_curve : <code>pd.DataFrame</code>, optional\n    The (optional) equity curve DataFrame for the benchmark\n    indexed by time.\nbenchmark_id : <code>str</code>, optional\n    The optional ID string for the benchmark to pass to\n    the statistics dict.\nbenchmark_name : <code>str</code>, optional\n    The optional name string for the benchmark to pass to\n    the statistics dict.\nperiods : <code>int</code>, optional\n    The number of periods to use for Sharpe ratio calculation.\noutput_filename : <code>str</code>\n    The filename to output the JSON statistics dictionary to.</p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.__init__", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">equity_curve</span>,</span><span class=\"param\">\t<span class=\"n\">target_allocations</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">benchmark_curve</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">benchmark_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">benchmark_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">252</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;statistics.json&#39;</span></span>)</span>"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.equity_curve", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.equity_curve", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.target_allocations", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.target_allocations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.strategy_id", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.strategy_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.strategy_name", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.strategy_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.benchmark_curve", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.benchmark_curve", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.benchmark_id", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.benchmark_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.benchmark_name", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.benchmark_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.periods", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.periods", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.output_filename", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.output_filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.statistics", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.statistics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.json_statistics.JSONStatistics.to_file", "modulename": "qstrader.statistics.json_statistics", "qualname": "JSONStatistics.to_file", "kind": "function", "doc": "<p>Outputs the statistics dictionary to a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.performance", "modulename": "qstrader.statistics.performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.performance.aggregate_returns", "modulename": "qstrader.statistics.performance", "qualname": "aggregate_returns", "kind": "function", "doc": "<p>Aggregates returns by day, week, month, or year.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returns</span>, </span><span class=\"param\"><span class=\"n\">convert_to</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.performance.create_cagr", "modulename": "qstrader.statistics.performance", "qualname": "create_cagr", "kind": "function", "doc": "<p>Calculates the Compound Annual Growth Rate (CAGR)\nfor the portfolio, by determining the number of years\nand then creating a compound annualised rate based\non the total return.</p>\n\n<p>Parameters:\nequity - A pandas Series representing the equity curve.\nperiods - Daily (252), Hourly (252<em>6.5), Minutely(252</em>6.5*60) etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">252</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.performance.create_sharpe_ratio", "modulename": "qstrader.statistics.performance", "qualname": "create_sharpe_ratio", "kind": "function", "doc": "<p>Create the Sharpe ratio for the strategy, based on a\nbenchmark of zero (i.e. no risk-free rate information).</p>\n\n<p>Parameters:\nreturns - A pandas Series representing period percentage returns.\nperiods - Daily (252), Hourly (252<em>6.5), Minutely(252</em>6.5*60) etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returns</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">252</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.performance.create_sortino_ratio", "modulename": "qstrader.statistics.performance", "qualname": "create_sortino_ratio", "kind": "function", "doc": "<p>Create the Sortino ratio for the strategy, based on a\nbenchmark of zero (i.e. no risk-free rate information).</p>\n\n<p>Parameters:\nreturns - A pandas Series representing period percentage returns.\nperiods - Daily (252), Hourly (252<em>6.5), Minutely(252</em>6.5*60) etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returns</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">252</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.performance.create_drawdowns", "modulename": "qstrader.statistics.performance", "qualname": "create_drawdowns", "kind": "function", "doc": "<p>Calculate the largest peak-to-trough drawdown of the equity curve\nas well as the duration of the drawdown. Requires that the\npnl_returns is a pandas Series.</p>\n\n<p>Parameters:\nequity - A pandas Series representing period percentage returns.</p>\n\n<p>Returns:\ndrawdown, drawdown_max, duration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.statistics", "modulename": "qstrader.statistics.statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.statistics.Statistics", "modulename": "qstrader.statistics.statistics", "qualname": "Statistics", "kind": "class", "doc": "<p>Statistics is an abstract class providing an interface for\nall inherited statistic classes (live, historic, custom, etc).</p>\n\n<p>The goal of a Statistics object is to keep a record of useful\ninformation about one or many trading strategies as the strategy\nis running. This is done by hooking into the main event loop and\nessentially updating the object according to portfolio performance\nover time.</p>\n\n<p>Ideally, Statistics should be subclassed according to the strategies\nand timeframes-traded by the user. Different trading strategies\nmay require different metrics or frequencies-of-metrics to be updated,\nhowever the example given is suitable for longer timeframes.</p>\n"}, {"fullname": "qstrader.statistics.statistics.Statistics.update", "modulename": "qstrader.statistics.statistics", "qualname": "Statistics.update", "kind": "function", "doc": "<p>Update all the statistics according to values of the portfolio\nand open positions. This should be called from within the\nevent loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.statistics.Statistics.get_results", "modulename": "qstrader.statistics.statistics", "qualname": "Statistics.get_results", "kind": "function", "doc": "<p>Return a dict containing all statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.statistics.Statistics.plot_results", "modulename": "qstrader.statistics.statistics", "qualname": "Statistics.plot_results", "kind": "function", "doc": "<p>Plot all statistics collected up until 'now'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.statistics.Statistics.save", "modulename": "qstrader.statistics.statistics", "qualname": "Statistics.save", "kind": "function", "doc": "<p>Save statistics results to filename</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.tearsheet", "modulename": "qstrader.statistics.tearsheet", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics", "kind": "class", "doc": "<p>Displays a Matplotlib-generated 'one-pager' as often\nfound in institutional strategy performance reports.</p>\n", "bases": "qstrader.statistics.statistics.Statistics"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.__init__", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">strategy_equity</span>, </span><span class=\"param\"><span class=\"n\">benchmark_equity</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">252</span></span>)</span>"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.strategy_equity", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.strategy_equity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.benchmark_equity", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.benchmark_equity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.title", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.periods", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.periods", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.get_results", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.get_results", "kind": "function", "doc": "<p>Return a dict with all important results &amp; stats.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">equity_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.statistics.tearsheet.TearsheetStatistics.plot_results", "modulename": "qstrader.statistics.tearsheet", "qualname": "TearsheetStatistics.plot_results", "kind": "function", "doc": "<p>Plot the Tearsheet</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.system", "modulename": "qstrader.system", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts", "modulename": "qstrader.system.qts", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem", "kind": "class", "doc": "<p>Encapsulates all components associated with the quantitative\ntrading system. This includes the alpha model(s), the risk\nmodel, the transaction cost model along with portfolio construction\nand execution mechanism.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>universe : <code>Universe</code>\n    The Asset Universe.\nbroker : <code>Broker</code>\n    The Broker to execute orders against.\nbroker_portfolio_id : <code>str</code>\n    The specific broker portfolio to send orders to.\ndata_handler : <code>DataHandler</code>\n    The data handler instance used for all market/fundamental data.\nalpha_model : <code>AlphaModel</code>\n    The alpha model used within the portfolio construction.\nrisk_model : <code>AlphaModel</code>, optional\n    An optional risk model used within the portfolio construction.\nlong_only : <code>Boolean</code>, optional\n    Whether to invoke the long only order sizer or allow\n    long/short leveraged portfolios. Defaults to long/short leveraged.\nsubmit_orders : <code>Boolean</code>, optional\n    Whether to actually submit generated orders. Defaults to no submission.</p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.__init__", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">universe</span>,</span><span class=\"param\">\t<span class=\"n\">broker</span>,</span><span class=\"param\">\t<span class=\"n\">broker_portfolio_id</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_model</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">risk_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">long_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">submit_orders</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.universe", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.broker", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.broker_portfolio_id", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.broker_portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.data_handler", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.alpha_model", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.alpha_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.risk_model", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.risk_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.long_only", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.long_only", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.qts.QuantTradingSystem.submit_orders", "modulename": "qstrader.system.qts", "qualname": "QuantTradingSystem.submit_orders", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance", "modulename": "qstrader.system.rebalance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.buy_and_hold", "modulename": "qstrader.system.rebalance.buy_and_hold", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.buy_and_hold.BuyAndHoldRebalance", "modulename": "qstrader.system.rebalance.buy_and_hold", "qualname": "BuyAndHoldRebalance", "kind": "class", "doc": "<p>Generates a single rebalance timestamp at the start date in\norder to create a single set of orders at the beginning of\na backtest, with no further rebalances carried out.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime of the buy and hold rebalance.</p>\n", "bases": "qstrader.system.rebalance.rebalance.Rebalance"}, {"fullname": "qstrader.system.rebalance.buy_and_hold.BuyAndHoldRebalance.__init__", "modulename": "qstrader.system.rebalance.buy_and_hold", "qualname": "BuyAndHoldRebalance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span></span>)</span>"}, {"fullname": "qstrader.system.rebalance.buy_and_hold.BuyAndHoldRebalance.start_dt", "modulename": "qstrader.system.rebalance.buy_and_hold", "qualname": "BuyAndHoldRebalance.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.buy_and_hold.BuyAndHoldRebalance.rebalances", "modulename": "qstrader.system.rebalance.buy_and_hold", "qualname": "BuyAndHoldRebalance.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.daily", "modulename": "qstrader.system.rebalance.daily", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor all business days (Monday-Friday) between two dates.</p>\n\n<p>Does not take into account holiday calendars.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_date : <code>pd.Timestamp</code>\n    The starting timestamp of the rebalance range.\nend_date : <code>pd.Timestamp</code>\n    The ending timestamp of the rebalance range.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close.</p>\n", "bases": "qstrader.system.rebalance.rebalance.Rebalance"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance.__init__", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance.start_date", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance.end_date", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance.market_time", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance.market_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.daily.DailyRebalance.rebalances", "modulename": "qstrader.system.rebalance.daily", "qualname": "DailyRebalance.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.end_of_month", "modulename": "qstrader.system.rebalance.end_of_month", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor the final calendar day of the month between the starting and\nending dates provided.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime of the rebalance range.\nend_dt : <code>pd.Timestamp</code>\n    The ending datetime of the rebalance range.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close on\n    the final day of the month. Defaults to False, i.e at\n    market close.</p>\n", "bases": "qstrader.system.rebalance.rebalance.Rebalance"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance.__init__", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_dt</span>, </span><span class=\"param\"><span class=\"n\">end_dt</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance.start_dt", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance.end_dt", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance.end_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance.market_time", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance.market_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.end_of_month.EndOfMonthRebalance.rebalances", "modulename": "qstrader.system.rebalance.end_of_month", "qualname": "EndOfMonthRebalance.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly", "modulename": "qstrader.system.rebalance.hourly", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor every hour between the starting and ending dates provided.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_date : <code>pd.Timestamp</code>\n    The starting timestamp of the rebalance range.\nend_date : <code>pd.Timestamp</code>\n    The ending timestamp of the rebalance range.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close.</p>\n", "bases": "qstrader.system.rebalance.rebalance.Rebalance"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.__init__", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">post_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.start_date", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.end_date", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.pre_market", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.pre_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.post_market", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.post_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.hourly.HourlyRebalance.rebalances", "modulename": "qstrader.system.rebalance.hourly", "qualname": "HourlyRebalance.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.rebalance", "modulename": "qstrader.system.rebalance.rebalance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.rebalance.Rebalance", "modulename": "qstrader.system.rebalance.rebalance", "qualname": "Rebalance", "kind": "class", "doc": "<p>Interface to a generic list of system logic and\ntrade order rebalance timestamps.</p>\n"}, {"fullname": "qstrader.system.rebalance.rebalance.Rebalance.output_rebalances", "modulename": "qstrader.system.rebalance.rebalance", "qualname": "Rebalance.output_rebalances", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.system.rebalance.weekly", "modulename": "qstrader.system.rebalance.weekly", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor a particular trading day of the week between the starting and\nending dates provided.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_date : <code>pd.Timestamp</code>\n    The starting timestamp of the rebalance range.\nend_date : <code>pd.Timestamp</code>\n    The ending timestamp of the rebalance range.\nweekday : <code>str</code>\n    The three-letter string representation of the weekday\n    to rebalance on once per week.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close.</p>\n", "bases": "qstrader.system.rebalance.rebalance.Rebalance"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.__init__", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span>, </span><span class=\"param\"><span class=\"n\">weekday</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.weekday", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.weekday", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.start_date", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.end_date", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.pre_market_time", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.pre_market_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.system.rebalance.weekly.WeeklyRebalance.rebalances", "modulename": "qstrader.system.rebalance.weekly", "qualname": "WeeklyRebalance.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading", "modulename": "qstrader.trading", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest", "modulename": "qstrader.trading.backtest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.DEFAULT_ACCOUNT_NAME", "modulename": "qstrader.trading.backtest", "qualname": "DEFAULT_ACCOUNT_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Backtest Simulated Broker Account&#x27;"}, {"fullname": "qstrader.trading.backtest.DEFAULT_PORTFOLIO_ID", "modulename": "qstrader.trading.backtest", "qualname": "DEFAULT_PORTFOLIO_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;000001&#x27;"}, {"fullname": "qstrader.trading.backtest.DEFAULT_PORTFOLIO_NAME", "modulename": "qstrader.trading.backtest", "qualname": "DEFAULT_PORTFOLIO_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Backtest Simulated Broker Portfolio&#x27;"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession", "kind": "class", "doc": "<p>Encaspulates a full trading simulation backtest with externally\nprovided instances for each module.</p>\n\n<p>Utilises sensible defaults to allow straightforward backtesting of\nless complex trading strategies.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_dt : <code>pd.Timestamp</code>\n    The starting datetime (UTC) of the backtest.\nend_dt : <code>pd.Timestamp</code>\n    The ending datetime (UTC) of the backtest.\nuniverse : <code>Universe</code>\n    The Asset Universe to utilise for the backtest.\nalpha_model : <code>AlphaModel</code>\n    The signal/forecast alpha model for the quant trading strategy.\nrisk_model : <code>RiskModel</code>\n    The optional risk model for the quant trading strategy.\nsignals : <code>SignalsCollection</code>, optional\n    An optional collection of signals used in the trading models.\ninitial_cash : <code>float</code>, optional\n    The initial account equity (defaults to $1MM)\nrebalance : <code>str</code>, optional\n    The rebalance frequency of the backtest, defaulting to 'weekly'.\naccount_name : <code>str</code>, optional\n    The name of the simulated broker account.\nportfolio_id : <code>str</code>, optional\n    The ID of the portfolio being used for the backtest.\nportfolio_name : <code>str</code>, optional\n    The name of the portfolio being used for the backtest.\nlong_only : <code>Boolean</code>, optional\n    Whether to invoke the long only order sizer or allow\n    long/short leveraged portfolios. Defaults to long/short leveraged.\nfee_model : <code>FeeModel</code> class instance, optional\n    The optional FeeModel derived subclass to use for transaction cost estimates.\nburn_in_dt : <code>pd.Timestamp</code>, optional\n    The optional date provided to begin tracking strategy statistics,\n    which is used for strategies requiring a period of data 'burn in'</p>\n", "bases": "qstrader.trading.trading_session.TradingSession"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.__init__", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_dt</span>,</span><span class=\"param\">\t<span class=\"n\">end_dt</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_model</span>,</span><span class=\"param\">\t<span class=\"n\">risk_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">signals</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"o\">=</span><span class=\"mf\">1000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">rebalance</span><span class=\"o\">=</span><span class=\"s1\">&#39;weekly&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">account_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Backtest Simulated Broker Account&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">portfolio_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;000001&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">portfolio_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Backtest Simulated Broker Portfolio&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">long_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fee_model</span><span class=\"o\">=&lt;</span><span class=\"n\">qstrader</span><span class=\"o\">.</span><span class=\"n\">broker</span><span class=\"o\">.</span><span class=\"n\">fee_model</span><span class=\"o\">.</span><span class=\"n\">zero_fee_model</span><span class=\"o\">.</span><span class=\"n\">ZeroFeeModel</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">burn_in_dt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">submit_orders</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.start_dt", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.start_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.end_dt", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.end_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.universe", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.universe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.alpha_model", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.alpha_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.risk_model", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.risk_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.signals", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.signals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.initial_cash", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.initial_cash", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.rebalance", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.rebalance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.account_name", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.account_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.portfolio_id", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.portfolio_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.portfolio_name", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.portfolio_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.long_only", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.long_only", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.fee_model", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.fee_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.burn_in_dt", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.burn_in_dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.exchange", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.exchange", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.data_handler", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.data_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.broker", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.broker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.sim_engine", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.sim_engine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.rebalance_schedule", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.rebalance_schedule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.qts", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.qts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.equity_curve", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.equity_curve", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.target_allocations", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.target_allocations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.output_holdings", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.output_holdings", "kind": "function", "doc": "<p>Output the portfolio holdings to the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.get_equity_curve", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.get_equity_curve", "kind": "function", "doc": "<p>Returns the equity curve as a Pandas DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>pd.DataFrame</code>\n    The datetime-indexed equity curve of the strategy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.get_target_allocations", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.get_target_allocations", "kind": "function", "doc": "<p>Returns the target allocations as a Pandas DataFrame\nutilising the same index as the equity curve with\nforward-filled dates.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>pd.DataFrame</code>\n    The datetime-indexed target allocations of the strategy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.trading.backtest.BacktestTradingSession.run", "modulename": "qstrader.trading.backtest", "qualname": "BacktestTradingSession.run", "kind": "function", "doc": "<p>Execute the simulation engine by iterating over all\nsimulation events, rebalancing the quant trading\nsystem at the appropriate schedule.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>results : <code>Boolean</code>, optional\n    Whether to output the current portfolio holdings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.trading.trading_session", "modulename": "qstrader.trading.trading_session", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.trading.trading_session.TradingSession", "modulename": "qstrader.trading.trading_session", "qualname": "TradingSession", "kind": "class", "doc": "<p>Interface to a live or backtested trading session.</p>\n"}, {"fullname": "qstrader.trading.trading_session.TradingSession.run", "modulename": "qstrader.trading.trading_session", "qualname": "TradingSession.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.utils", "modulename": "qstrader.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.console", "modulename": "qstrader.utils.console", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.console.string_colour", "modulename": "qstrader.utils.console", "qualname": "string_colour", "kind": "function", "doc": "<p>Create string text in a particular colour to the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">colour</span><span class=\"o\">=</span><span class=\"mi\">7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qstrader.utils.times", "modulename": "qstrader.utils.times", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessDays", "modulename": "qstrader.utils.times", "qualname": "BusinessDays", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor every hour between the starting and ending dates provided.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_date : <code>pd.Timestamp</code>\n    The starting timestamp of the rebalance range.\nend_date : <code>pd.Timestamp</code>\n    The ending timestamp of the rebalance range.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close.</p>\n"}, {"fullname": "qstrader.utils.times.BusinessDays.__init__", "modulename": "qstrader.utils.times", "qualname": "BusinessDays.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">post_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.utils.times.BusinessDays.start_date", "modulename": "qstrader.utils.times", "qualname": "BusinessDays.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessDays.end_date", "modulename": "qstrader.utils.times", "qualname": "BusinessDays.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessDays.rebalances", "modulename": "qstrader.utils.times", "qualname": "BusinessDays.rebalances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours", "modulename": "qstrader.utils.times", "qualname": "BusinessHours", "kind": "class", "doc": "<p>Generates a list of rebalance timestamps for pre- or post-market,\nfor every hour between the starting and ending dates provided.</p>\n\n<p>All timestamps produced are set to UTC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_date : <code>pd.Timestamp</code>\n    The starting timestamp of the rebalance range.\nend_date : <code>pd.Timestamp</code>\n    The ending timestamp of the rebalance range.\npre_market : <code>Boolean</code>, optional\n    Whether to carry out the rebalance at market open/close.</p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours.__init__", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span>, </span><span class=\"param\"><span class=\"n\">pre_market</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">post_market</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "qstrader.utils.times.BusinessHours.start_date", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours.end_date", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours.pre_market", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.pre_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours.post_market", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.post_market", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qstrader.utils.times.BusinessHours.rebalances", "modulename": "qstrader.utils.times", "qualname": "BusinessHours.rebalances", "kind": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();